def component = [
        front: false,
        back: true,
]

pipeline {
    agent any
    environment {
        REPO = "s10-webmobile1-sub2/S10P12C207"
    }
    stages {


stage('Checkout') {
            steps {
                checkout scm
            }
        }

//        stage('Move .env File') {
//            steps {
//                sh "ls backend/secure-settings"
//                // Git Submodule 내부의 .env 파일을 현재 작업 디렉토리로 이동
//                sh 'cp backend/secure-settings/.env .env'
//            }
//        }
        stage('Setup Environment') {
            steps {
                dir("${env.WORKSPACE}/backend") {
                    script {
                        sh "ls . -al"
                        sh "chmod +x ./gradlew"
                    }
                }
            }
        }
        stage("Build") {
            steps {
                script {
                    sh "ls -al"
                    component.each { entry ->
                        if (entry.value) {
                            sh "docker compose -p myname build --no-cache ${entry.key.toLowerCase()}"
                        }
                    }
                }
            }
        }
        stage("Login") {
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-Hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                    sh """
                        set +x
                        echo $DOCKER_USER_PASSWORD | docker login -u $DOCKER_USER_ID --password-stdin
                        set -x
                    """
                }
            }
        }
        stage("Tag and Push") {
            steps {
                script {
                    component.each { entry ->
                        if (entry.value && entry.key != "redis") {
                            def var = entry.key
                            withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-Hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                                sh "docker push ${DOCKER_USER_ID}/myname-${var.toLowerCase()}"
                            }
                        }
                    }
                }
            }
        }
        stage('Prune old images') {
            steps {
                script {
                    sh "docker system prune --filter until=1h"
                }
            }
        }
        stage('Pull') {
            steps {
                script {
                    component.each { entry ->
                        if (entry.value && entry.key != "redis") {
                            def var = entry.key
                            sh "docker compose -p myname pull ${var.toLowerCase()}"
                        }
                    }
                }
            }
        }
        stage('Up') {
            steps {
                script {
                    component.each { entry ->
                        if (entry.value) {
                            def var = entry.key
                            try {
                                sh "docker compose -p myname up -d ${var.toLowerCase()}"
                            } catch (Exception e) {
                                // 'docker compose up -d' 명령이 실패한 경우
                                echo "Failed to up. Starting 'docker compose start'..."
                                sh "docker compose -p myname restart ${var.toLowerCase()}"
                            }
                        }
                    }
                }
            }
        }
    }
//    post {
//        always {
//            script {
//                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
//                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
//                mattermostSend (color: 'good',
//                        message: "빌드 성공: ${currentBuild.currentResult} ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)",
//                        endpoint: 'https://meeting.ssafy.com/hooks/q4qjarpscbf9pme4f46yiojzfe',
//                        channel: 'C107-Jenkins'
//                )
//            }
//        }
//    }
}
